services:
  backend:
    build:
      context: ./cc-webapp/backend
      dockerfile: Dockerfile
    container_name: cc_backend
    environment:
      PYTHONPATH: /app
      POSTGRES_SERVER: ${POSTGRES_SERVER:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-cc_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cc_password}
      POSTGRES_DB: ${POSTGRES_DB:-cc_webapp}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-secret_key_for_development_only}
    volumes:
      - ./cc-webapp/backend:/app
      - ./logs/backend:/app/logs:rw
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - ccnet

  frontend:
    build:
      context: ./cc-webapp/frontend
      dockerfile: Dockerfile.dev
    container_name: cc_frontend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    volumes:
      - ./cc-webapp/frontend:/app
      - ./logs/frontend:/app/logs:rw
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - ccnet

  postgres:
    image: postgres:14
    container_name: cc_postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-cc_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-cc_password}
      - POSTGRES_DB=${POSTGRES_DB:-cc_webapp}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data:rw
      - ./logs/postgres:/var/log/postgresql:rw
      - ./data/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - ccnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cc_user} -d ${POSTGRES_DB:-cc_webapp}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: cc_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ccnet

networks:
  ccnet:
    driver: bridge