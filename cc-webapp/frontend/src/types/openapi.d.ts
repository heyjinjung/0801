/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Signup */
        post: operations["signup_api_auth_signup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login */
        post: operations["login_api_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/admin/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Login */
        post: operations["admin_login_api_auth_admin_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh */
        post: operations["refresh_api_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout */
        post: operations["logout_api_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout All */
        post: operations["logout_all_api_auth_logout_all_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Me
         * @description Alias to current user profile for clients expecting /api/auth/me.
         */
        get: operations["me_api_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Profile
         * @description 현재 로그인한 사용자 프로필 조회
         */
        get: operations["get_profile_api_users_profile_get"];
        /**
         * Update User Profile
         * @description Update user profile
         */
        put: operations["update_user_profile_api_users_profile_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Balance
         * @description 사용자 잔액 조회
         */
        get: operations["get_user_balance_api_users_balance_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Info
         * @description 사용자 상세 정보 조회
         */
        get: operations["get_user_info_api_users_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Stats
         * @description Get user statistics
         */
        get: operations["get_user_stats_api_users_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/tokens/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Tokens
         * @description Add tokens to user account (admin or special purposes)
         */
        post: operations["add_tokens_api_users_tokens_add_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User
         * @description 특정 사용자 정보 조회 (본인=전체, 타인=제한적 정보)
         */
        get: operations["get_user_api_users__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Admin Stats
         * @description Get admin statistics
         */
        get: operations["get_admin_stats_api_admin_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}/ban": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ban User
         * @description Ban a user
         */
        post: operations["ban_user_api_admin_users__user_id__ban_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}/unban": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unban User
         * @description Unban a user
         */
        post: operations["unban_user_api_admin_users__user_id__unban_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}/tokens/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add User Tokens
         * @description Add tokens to a user account (admin only)
         */
        post: operations["add_user_tokens_api_admin_users__user_id__tokens_add_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Action
         * @description Logs an action and publishes it to Kafka.
         *     For now, this is a simplified stub.
         *     Replace user_id and action_type with a Pydantic model (e.g., schemas.ActionCreate) later.
         */
        post: operations["create_action_api_actions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rewards/users/{user_id}/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Rewards
         * @description Retrieves a paginated list of rewards for a specific user.
         */
        get: operations["get_user_rewards_api_rewards_users__user_id__rewards_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rewards/distribute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Distribute Reward To User
         * @description Distributes a specific reward to a user.
         *     This is the central endpoint for granting rewards from games or events.
         */
        post: operations["distribute_reward_to_user_api_rewards_distribute_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shop/purchase": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Purchase Item
         * @description Purchase shop item using user's gold tokens
         */
        post: operations["purchase_shop_item_api_shop_purchase_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/missions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Missions
         * @description Get the list of active missions and the current user's progress.
         */
        get: operations["get_user_missions_api_missions__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/missions/{mission_id}/claim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Claim Mission Reward
         * @description Claim the reward for a completed mission.
         */
        post: operations["claim_mission_reward_api_missions__mission_id__claim_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quiz/{quiz_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Quiz Details
         * @description Get the details, questions, and answers for a specific quiz.
         */
        get: operations["get_quiz_details_quiz__quiz_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quiz/{quiz_id}/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit Quiz Answers
         * @description Submit answers for a quiz and get the resulting risk profile.
         */
        post: operations["submit_quiz_answers_quiz__quiz_id__submit_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/status/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Connection Status
         * @description Check if user has an active WebSocket connection.
         */
        get: operations["get_connection_status_api_chat_status__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/recommendations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Recommendations
         * @description Get AI recommendation list
         */
        get: operations["get_user_recommendations_api_ai_recommendations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/recommendations/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Recommendations
         * @description AI �KOREAN_TEXT_REMOVED KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED
         */
        post: operations["generate_recommendations_api_ai_recommendations_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/recommendations/{recommendation_id}/interact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Record Recommendation Interaction
         * @description �KOREAN_TEXT_REMOVED KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED �KOREAN_TEXT_REMOVED
         */
        post: operations["record_recommendation_interaction_api_ai_recommendations__recommendation_id__interact_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Preferences
         * @description KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED
         */
        get: operations["get_user_preferences_api_ai_preferences_get"];
        /**
         * Update User Preferences
         * @description KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED
         */
        put: operations["update_user_preferences_api_ai_preferences_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/personalize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Personalized Content
         * @description �KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED
         */
        post: operations["get_personalized_content_api_ai_personalize_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/predictions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Predictions
         * @description KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVEDAI KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED �KOREAN_TEXT_REMOVED �KOREAN_TEXT_REMOVED
         */
        get: operations["get_user_predictions_api_ai_predictions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/recommendations/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recommendation Stats
         * @description �KOREAN_TEXT_REMOVED KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED
         */
        get: operations["get_recommendation_stats_api_ai_recommendations_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit Ai Feedback
         * @description AI �KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED
         */
        post: operations["submit_ai_feedback_api_ai_feedback_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/learning-progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Learning Progress
         * @description AI KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED �KOREAN_TEXT_REMOVED KOREAN_TEXT_REMOVED�KOREAN_TEXT_REMOVED
         */
        get: operations["get_learning_progress_api_ai_learning_progress_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/main": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Main Dashboard
         * @description Get main dashboard statistics.
         */
        get: operations["get_main_dashboard_dashboard_main_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/games": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Games Dashboard
         * @description Get game-specific dashboard statistics.
         */
        get: operations["get_games_dashboard_dashboard_games_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/social-proof": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Social Proof
         * @description Get statistics for social proof widgets.
         *     This endpoint is not protected by admin auth to be publicly available.
         */
        get: operations["get_social_proof_dashboard_social_proof_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sse/notifications/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sse Notifications
         * @description SSE notifications stream for a user.
         *
         *     Headers:
         *       - Last-Event-ID: resume from this id if provided
         *     Query:
         *       - topics: comma-separated topic filters (optional)
         */
        get: operations["sse_notifications_sse_notifications__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/{user_id}/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Notification */
        post: operations["send_notification_api_notifications__user_id__send_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/{user_id}/backfill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Backfill
         * @description Debug/validation helper: return current in-memory backfill for a user.
         *
         *     Query:
         *         - since: return events with id > since
         *         - topics: comma-separated filter
         */
        get: operations["get_backfill_api_notifications__user_id__backfill_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/doc-titles/docs/titles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Docs Titles
         * @description Return document names and their H1-H3 titles from the docs folder.
         */
        get: operations["get_docs_titles_api_doc_titles_docs_titles_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback/emotion_based": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Personalized Emotion-Based Feedback */
        post: operations["get_emotion_based_feedback_endpoint_feedback_emotion_based_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Feedback
         * @description Generate emotion-based feedback for user
         *
         *     Args:
         *         request: Feedback request data
         *             - user_id: User ID
         *             - emotion: Emotion state
         *             - segment: User segment
         *             - context: Additional context information
         *
         *     Returns:
         *         Feedback response object
         */
        post: operations["generate_feedback_feedback_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/gacha/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Gacha Config */
        get: operations["get_gacha_config_api_games_gacha_config_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/gacha/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Gacha Stats */
        get: operations["get_gacha_stats_api_games_gacha_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Games List
         * @description 게임 목록 조회 (직접 JSON 반환)
         */
        get: operations["get_games_list_api_games__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/slot/spin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Spin Slot
         * @description 슬롯머신 스핀
         */
        post: operations["spin_slot_api_games_slot_spin_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/rps/play": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Play Rps
         * @description 가위바위보 플레이
         */
        post: operations["play_rps_api_games_rps_play_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/gacha/pull": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pull Gacha
         * @description 가챠 뽑기 (서비스 레이어 위임: 피티, 근접실패, 10연 할인 적용)
         */
        post: operations["pull_gacha_api_games_gacha_pull_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/crash/bet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Place Crash Bet
         * @description 크래시 게임 베팅
         */
        post: operations["place_crash_bet_api_games_crash_bet_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/stats/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Game Stats
         * @description 사용자 전체 게임 통계 (슬롯/룰렛/가챠 등)
         */
        get: operations["get_game_stats_api_games_stats__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/profile/{user_id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Profile Game Stats
         * @description 프로필용 상세 게임 통계
         */
        get: operations["get_profile_game_stats_api_games_profile__user_id__stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Game Leaderboard
         * @description 게임별 또는 전체 리더보드
         */
        get: operations["get_game_leaderboard_api_games_leaderboard_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/achievements/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Achievements
         * @description 사용자 업적 목록 (기본 예시)
         */
        get: operations["get_user_achievements_api_games_achievements__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/session/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Game Session
         * @description 게임 세션 시작
         */
        post: operations["start_game_session_api_games_session_start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/session/end": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * End Game Session
         * @description 게임 세션 종료
         */
        post: operations["end_game_session_api_games_session_end_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invite/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Invite Code
         * @description Generate a new invite code
         *     Only admin users can generate invite codes
         */
        post: operations["create_invite_code_api_invite_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invite/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Invite Code
         * @description Validate an invite code
         *     Returns validation status and code details
         */
        post: operations["validate_invite_code_api_invite_validate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invite/codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Invite Codes
         * @description List all invite codes created by the current user
         *     Admin users can see all codes
         */
        get: operations["list_invite_codes_api_invite_codes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invite/codes/{code}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Deactivate Invite Code
         * @description Deactivate an invite code
         *     Only the creator or admin can deactivate
         */
        patch: operations["deactivate_invite_code_api_invite_codes__code__deactivate_patch"];
        trace?: never;
    };
    "/api/invite/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Invite Stats
         * @description Get invite code statistics
         *     Shows usage metrics for the current user's codes
         */
        get: operations["get_invite_stats_api_invite_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rbac/premium": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Premium Only */
        get: operations["premium_only_api_rbac_premium_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rbac/vip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Vip Only */
        get: operations["vip_only_api_rbac_vip_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/dashboard/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dashboard Summary
         * @description Get basic dashboard summary with key metrics
         */
        get: operations["get_dashboard_summary_api_analytics_dashboard_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/users/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Activity
         * @description Get user activity analytics for the specified period
         */
        get: operations["get_user_activity_api_analytics_users_activity_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/games/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Game Statistics
         * @description Get game performance statistics
         */
        get: operations["get_game_statistics_api_analytics_games_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/segments/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Segment
         * @description Get segmentation information for a specific user
         *     Returns RFM group, LTV score, and risk profile
         */
        get: operations["get_user_segment_api_segments_user__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/segments/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List All Segments
         * @description Get statistics for all user segments
         *     Admin only endpoint for business intelligence
         */
        get: operations["list_all_segments_api_segments_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/segments/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update User Segment
         * @description Update user segment information
         *     Admin only endpoint for manual segment adjustments
         */
        put: operations["update_user_segment_api_segments_update_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/segments/calculate-rfm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Calculate Rfm Segments
         * @description Recalculate RFM segments for all users
         *     Admin only endpoint for batch segment updates
         */
        post: operations["calculate_rfm_segments_api_segments_calculate_rfm_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/segments/distribution": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Segment Distribution
         * @description Get distribution of users across different segments
         *     Returns percentage breakdown and counts
         */
        get: operations["get_segment_distribution_api_segments_distribution_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tracking/site-visit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log Site Visit Endpoint
         * @description Logs a visit to an external corporate site or other tracked action.
         */
        post: operations["log_site_visit_endpoint_tracking_site_visit_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/unlock/unlock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Attempt Content Unlock */
        get: operations["attempt_content_unlock_api_unlock_unlock_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Active Events
         * @description 활성 이벤트 목록 조회
         */
        get: operations["get_active_events_api_events__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Event Detail
         * @description 이벤트 상세 조회
         */
        get: operations["get_event_detail_api_events__event_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join Event
         * @description 이벤트 참여
         */
        post: operations["join_event_api_events_join_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/progress/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Event Progress
         * @description 이벤트 진행 상황 업데이트
         */
        put: operations["update_event_progress_api_events_progress__event_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/claim/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Claim Event Rewards
         * @description 이벤트 보상 수령
         */
        post: operations["claim_event_rewards_api_events_claim__event_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/missions/daily": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Daily Missions
         * @description 일일 미션 목록 조회
         */
        get: operations["get_daily_missions_api_events_missions_daily_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/missions/weekly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Weekly Missions
         * @description 주간 미션 목록 조회
         */
        get: operations["get_weekly_missions_api_events_missions_weekly_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/missions/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Missions
         * @description 모든 미션 목록 조회
         */
        get: operations["get_all_missions_api_events_missions_all_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/missions/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Mission Progress
         * @description 미션 진행 상황 업데이트
         */
        put: operations["update_mission_progress_api_events_missions_progress_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/missions/claim/{mission_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Claim Mission Rewards
         * @description 미션 보상 수령
         */
        post: operations["claim_mission_rewards_api_events_missions_claim__mission_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/kafka/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Kafka Health
         * @description Lightweight health that reflects config; avoids blocking if broker is absent.
         */
        get: operations["kafka_health_api_kafka_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/kafka/produce": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Kafka Produce
         * @description Produce a message to Kafka if enabled; otherwise 503.
         */
        post: operations["kafka_produce_api_kafka_produce_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/kafka/debug/peek": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Kafka Peek
         * @description Peek messages directly from Kafka with a temporary consumer.
         *
         *     Returns up to max_messages messages with basic metadata. Does not commit offsets.
         */
        get: operations["kafka_peek_api_kafka_debug_peek_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/kafka/_debug/last": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Kafka Last Messages
         * @description Return last consumed Kafka messages (debug).
         */
        get: operations["kafka_last_messages_api_kafka__debug_last_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/kafka/_debug/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Kafka Ready
         * @description Return whether the Kafka consumer is initialized and assigned partitions.
         */
        get: operations["kafka_ready_api_kafka__debug_ready_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Api Info
         * @description API information endpoint
         */
        get: operations["api_info_api_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Achievement
         * @description 사용자 업적
         */
        Achievement: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Badge Icon */
            badge_icon: string;
            /** Badge Color */
            badge_color: string;
            /** Achieved At */
            achieved_at?: string | null;
            /** Progress */
            progress?: number | null;
        };
        /**
         * AdminLogin
         * @description 관리자 로그인 스키마
         * @example {
         *       "password": "admin123",
         *       "site_id": "admin"
         *     }
         */
        AdminLogin: {
            /**
             * Site Id
             * @description 관리자 사이트 아이디
             */
            site_id: string;
            /**
             * Password
             * @description 관리자 비밀번호
             */
            password: string;
        };
        /**
         * AdminStatsResponse
         * @description Admin statistics response
         */
        AdminStatsResponse: {
            /** Total Users */
            total_users: number;
            /** Active Users */
            active_users: number;
            /** Total Games Played */
            total_games_played: number;
            /** Total Tokens In Circulation */
            total_tokens_in_circulation: number;
        };
        /** AnswerRequest */
        AnswerRequest: {
            /** Answers */
            answers: {
                [key: string]: number;
            };
        };
        /** Body_refresh_api_auth_refresh_post */
        Body_refresh_api_auth_refresh_post: {
            /** Refresh Token */
            refresh_token?: string | null;
        };
        /** ClaimRewardResponse */
        ClaimRewardResponse: {
            /** Success */
            success: boolean;
            /** Rewards */
            rewards: {
                [key: string]: unknown;
            };
            /** Message */
            message: string;
        };
        /**
         * CrashBetRequest
         * @description 크래시 게임 베팅 요청 모델
         */
        CrashBetRequest: {
            /** Bet Amount */
            bet_amount: number;
            /** Auto Cashout Multiplier */
            auto_cashout_multiplier?: number | null;
        };
        /**
         * CrashBetResponse
         * @description 크래시 게임 베팅 응답 모델
         */
        CrashBetResponse: {
            /** Success */
            success: boolean;
            /** Game Id */
            game_id: string;
            /** Bet Amount */
            bet_amount: number;
            /** Potential Win */
            potential_win: number;
            /** Max Multiplier */
            max_multiplier?: number | null;
            /** Message */
            message: string;
            /** Balance */
            balance: number;
        };
        /** EmotionFeedbackRequest */
        EmotionFeedbackRequest: {
            /**
             * Emotion Result Data
             * @description EmotionResult as dict.
             */
            emotion_result_data: {
                [key: string]: unknown;
            };
            /**
             * User Segment
             * @default GENERAL
             */
            user_segment: string | null;
            /**
             * Mission Type
             * @default GENERAL
             */
            mission_type: string | null;
            /** Context Text */
            context_text?: string | null;
        };
        /** EventJoin */
        EventJoin: {
            /** Event Id */
            event_id: number;
        };
        /** EventParticipationResponse */
        EventParticipationResponse: {
            /** Event Id */
            event_id: number;
            /**
             * Progress
             * @default {}
             */
            progress: {
                [key: string]: unknown;
            } | null;
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /** Completed */
            completed: boolean;
            /** Claimed Rewards */
            claimed_rewards: boolean;
            /**
             * Joined At
             * Format: date-time
             */
            joined_at: string;
            /** Completed At */
            completed_at?: string | null;
            event?: components["schemas"]["EventResponse"] | null;
        };
        /** EventProgressUpdate */
        EventProgressUpdate: {
            /** Progress */
            progress: {
                [key: string]: unknown;
            };
        };
        /** EventResponse */
        EventResponse: {
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Event Type */
            event_type: string;
            /**
             * Start Date
             * Format: date-time
             */
            start_date: string;
            /**
             * End Date
             * Format: date-time
             */
            end_date: string;
            /** Rewards */
            rewards: {
                [key: string]: unknown;
            };
            /**
             * Requirements
             * @default {}
             */
            requirements: {
                [key: string]: unknown;
            } | null;
            /** Image Url */
            image_url?: string | null;
            /**
             * Priority
             * @default 0
             */
            priority: number;
            /** Id */
            id: number;
            /** Is Active */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Participation Count
             * @default 0
             */
            participation_count: number | null;
            /** User Participation */
            user_participation?: {
                [key: string]: unknown;
            } | null;
        };
        /** FeedbackResponse */
        FeedbackResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** Animation Key */
            animation_key?: string | null;
            /** Sound Key */
            sound_key?: string | null;
            /** Intensity */
            intensity?: number | null;
            /** Color Scheme */
            color_scheme?: string | null;
            /** Bonus Tokens */
            bonus_tokens?: number | null;
        };
        /**
         * GachaPullRequest
         * @description 가챠 뽑기 요청 모델
         * @example {
         *       "pull_count": 10,
         *       "use_premium_currency": false
         *     }
         */
        GachaPullRequest: {
            /** Gacha Id */
            gacha_id?: string | null;
            /**
             * Pull Count
             * @default 1
             */
            pull_count: number;
            /**
             * Use Premium Currency
             * @default false
             */
            use_premium_currency: boolean;
        };
        /**
         * GachaPullResponse
         * @description 가챠 뽑기 응답 모델
         * @example {
         *       "animation_type": "near_miss",
         *       "balance": 12345,
         *       "currency_balance": {
         *         "gems": 0,
         *         "tokens": 11895
         *       },
         *       "items": [
         *         {
         *           "name": "Neon Chip",
         *           "rarity": "common"
         *         },
         *         {
         *           "name": "Cyber Ring",
         *           "rarity": "rare"
         *         },
         *         {
         *           "name": "Blade of Flux",
         *           "rarity": "epic"
         *         }
         *       ],
         *       "message": "Gacha pull completed",
         *       "psychological_message": "거의 다 왔어요! 한 번만 더 도전해보세요!",
         *       "pull_count": 10,
         *       "rare_item_count": 1,
         *       "success": true,
         *       "ultra_rare_item_count": 1
         *     }
         */
        GachaPullResponse: {
            /** Success */
            success: boolean;
            /** Items */
            items: {
                [key: string]: unknown;
            }[];
            /**
             * Rare Item Count
             * @default 0
             */
            rare_item_count: number;
            /**
             * Ultra Rare Item Count
             * @default 0
             */
            ultra_rare_item_count: number;
            /** Pull Count */
            pull_count: number;
            /** Balance */
            balance: number;
            /** Special Animation */
            special_animation?: string | null;
            /**
             * Animation Type
             * @description 애니메이션 타입: normal|epic|legendary|near_miss|pity
             */
            animation_type?: string | null;
            /**
             * Psychological Message
             * @description 즉시 피드백용 메시지
             */
            psychological_message?: string | null;
            /** Message */
            message: string;
            /** Currency Balance */
            currency_balance: {
                [key: string]: number;
            };
        };
        /**
         * GameLeaderboard
         * @description 게임 리더보드 응답
         */
        GameLeaderboard: {
            /** Game Type */
            game_type: string;
            /** Period */
            period: string;
            /**
             * Entries
             * @default []
             */
            entries: components["schemas"]["LeaderboardEntry"][];
            /** User Rank */
            user_rank?: number | null;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * GameSession
         * @description 게임 세션 모델
         */
        GameSession: {
            /** Session Id */
            session_id: string;
            /** User Id */
            user_id: number;
            /** Game Type */
            game_type: string;
            /**
             * Start Time
             * Format: date-time
             */
            start_time: string;
            /** Duration */
            duration?: number | null;
            /**
             * Current Bet
             * @default 0
             */
            current_bet: number | null;
            /**
             * Current Round
             * @default 0
             */
            current_round: number | null;
            /**
             * Status
             * @default active
             */
            status: string;
        };
        /**
         * GameStats
         * @description 사용자 게임 통계 모델
         */
        GameStats: {
            /** User Id */
            user_id: number;
            /**
             * Total Spins
             * @default 0
             */
            total_spins: number;
            /**
             * Total Coins Won
             * @default 0
             */
            total_coins_won: number;
            /**
             * Total Gems Won
             * @default 0
             */
            total_gems_won: number;
            /**
             * Special Items Won
             * @default 0
             */
            special_items_won: number;
            /**
             * Jackpots Won
             * @default 0
             */
            jackpots_won: number;
            /**
             * Bonus Spins Won
             * @default 0
             */
            bonus_spins_won: number;
            /**
             * Best Streak
             * @default 0
             */
            best_streak: number;
            /**
             * Current Streak
             * @default 0
             */
            current_streak: number;
            /** Last Spin Date */
            last_spin_date?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HealthResponse */
        HealthResponse: {
            /** Status */
            status: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Version */
            version: string;
        };
        /**
         * InteractionType
         * @enum {string}
         */
        InteractionType: "view" | "click" | "dismiss" | "complete";
        /** InviteCodeResponse */
        InviteCodeResponse: {
            /** Code */
            code: string;
            /** Expires At */
            expires_at?: string | null;
            /**
             * Max Uses
             * @default 1
             */
            max_uses: number;
            /**
             * Used Count
             * @default 0
             */
            used_count: number;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * LeaderboardEntry
         * @description 리더보드 항목
         */
        LeaderboardEntry: {
            /** Rank */
            rank: number;
            /** User Id */
            user_id: number;
            /** Nickname */
            nickname: string;
            /** Score */
            score: number;
            /** Avatar Url */
            avatar_url?: string | null;
        };
        /** MissionResponse */
        MissionResponse: {
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Mission Type */
            mission_type: string;
            /** Category */
            category?: string | null;
            /** Target Value */
            target_value: number;
            /** Target Type */
            target_type: string;
            /** Rewards */
            rewards: {
                [key: string]: unknown;
            };
            /**
             * Requirements
             * @default {}
             */
            requirements: {
                [key: string]: unknown;
            } | null;
            /** Reset Period */
            reset_period?: string | null;
            /** Icon */
            icon?: string | null;
            /** Id */
            id: number;
            /** Is Active */
            is_active: boolean;
            /** Sort Order */
            sort_order: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** User Progress */
            user_progress?: {
                [key: string]: unknown;
            } | null;
        };
        /** ModelPredictionResponse */
        ModelPredictionResponse: {
            /** Id */
            id: number;
            /** Model Id */
            model_id: number;
            /** User Id */
            user_id: number;
            /** Prediction Type */
            prediction_type: string;
            /**
             * Input Features
             * @default {}
             */
            input_features: {
                [key: string]: unknown;
            };
            /**
             * Prediction Result
             * @default {}
             */
            prediction_result: {
                [key: string]: unknown;
            };
            /**
             * Confidence Score
             * @default 0.5
             */
            confidence_score: number;
            /** Actual Result */
            actual_result?: {
                [key: string]: unknown;
            } | null;
            /** Is Correct */
            is_correct?: boolean | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Validated At */
            validated_at?: string | null;
        };
        /** PaginatedRewardsResponse */
        PaginatedRewardsResponse: {
            /** Rewards */
            rewards: components["schemas"]["RewardItem"][];
            /** Page */
            page: number;
            /** Page Size */
            page_size: number;
            /** Total Rewards */
            total_rewards: number;
            /** Total Pages */
            total_pages: number;
        };
        /** PersonalizationRequest */
        PersonalizationRequest: {
            /** User Id */
            user_id: number;
            /** Content Type */
            content_type: string;
            /** Context Data */
            context_data?: {
                [key: string]: unknown;
            } | null;
            /**
             * Max Recommendations
             * @default 5
             */
            max_recommendations: number;
        };
        /** PersonalizationResponse */
        PersonalizationResponse: {
            /** Recommendations */
            recommendations: components["schemas"]["UserRecommendationResponse"][];
            /** Personalization Factors */
            personalization_factors: {
                [key: string]: unknown;
            };
            /** Confidence Score */
            confidence_score: number;
            /** Algorithm Version */
            algorithm_version: string;
            /**
             * Generated At
             * Format: date-time
             */
            generated_at: string;
        };
        /** ProduceRequest */
        ProduceRequest: {
            /** Topic */
            topic: string;
            /** Payload */
            payload: {
                [key: string]: unknown;
            };
        };
        /**
         * ProfileGameStats
         * @description 프로필 게임 통계 응답
         */
        ProfileGameStats: {
            /** User Id */
            user_id: number;
            /**
             * Total Games Played
             * @default 0
             */
            total_games_played: number;
            /** Total Time Played */
            total_time_played?: number | null;
            /** Favorite Game */
            favorite_game?: string | null;
            /**
             * Recent Activities
             * @default []
             */
            recent_activities: components["schemas"]["UserGameActivity"][];
            /**
             * Achievements
             * @default []
             */
            achievements: components["schemas"]["Achievement"][];
            current_session?: components["schemas"]["GameSession"] | null;
        };
        /**
         * PublicUserResponse
         * @description 타인 보기용 제한 정보 스키마
         */
        PublicUserResponse: {
            /** Id */
            id: number;
            /** Site Id */
            site_id: string;
            /** Nickname */
            nickname: string;
            /**
             * Phone Number
             * @default hidden
             */
            phone_number: string;
            /**
             * Cyber Token Balance
             * @default 0
             */
            cyber_token_balance: number;
            /** Created At */
            created_at?: string | null;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Is Admin
             * @default false
             */
            is_admin: boolean;
            /**
             * Rank
             * @default STANDARD
             */
            rank: string | null;
        };
        /**
         * RPSPlayRequest
         * @description 가위바위보 게임 요청 모델
         */
        RPSPlayRequest: {
            /** Choice */
            choice: string;
            /** Bet Amount */
            bet_amount: number;
        };
        /**
         * RPSPlayResponse
         * @description 가위바위보 게임 응답 모델
         */
        RPSPlayResponse: {
            /** Success */
            success: boolean;
            /** Player Choice */
            player_choice: string;
            /** Computer Choice */
            computer_choice: string;
            /** Result */
            result: string;
            /**
             * Win Amount
             * @default 0
             */
            win_amount: number;
            /** Message */
            message: string;
            /** Balance */
            balance: number;
            /** Streak */
            streak?: number | null;
        };
        /** RecommendationInteractionCreate */
        RecommendationInteractionCreate: {
            interaction_type: components["schemas"]["InteractionType"];
            /** Interaction Data */
            interaction_data?: {
                [key: string]: unknown;
            } | null;
            /** Duration */
            duration?: number | null;
            /** Result Data */
            result_data?: {
                [key: string]: unknown;
            } | null;
        };
        /** RecommendationInteractionResponse */
        RecommendationInteractionResponse: {
            /** Id */
            id: number;
            /** Recommendation Id */
            recommendation_id: number;
            /** User Id */
            user_id: number;
            interaction_type: components["schemas"]["InteractionType"];
            /** Interaction Data */
            interaction_data?: {
                [key: string]: unknown;
            } | null;
            /** Duration */
            duration?: number | null;
            /** Result Data */
            result_data?: {
                [key: string]: unknown;
            } | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * RecommendationStatus
         * @enum {string}
         */
        RecommendationStatus: "pending" | "shown" | "clicked" | "dismissed" | "expired";
        /**
         * RecommendationType
         * @enum {string}
         */
        RecommendationType: "game" | "reward" | "mission" | "content";
        /**
         * RefreshTokenRequest
         * @description 리프레시 토큰 요청
         */
        RefreshTokenRequest: {
            /** Refresh Token */
            refresh_token: string;
        };
        /** RewardDistributionRequest */
        RewardDistributionRequest: {
            /** User Id */
            user_id: number;
            /** Reward Type */
            reward_type: string;
            /** Amount */
            amount: number;
            /** Source Description */
            source_description: string;
            /** Idempotency Key */
            idempotency_key?: string | null;
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
        };
        /** RewardItem */
        RewardItem: {
            /** Reward Id */
            reward_id: number;
            /** Reward Type */
            reward_type: string;
            /** Reward Value */
            reward_value: string;
            /**
             * Awarded At
             * Format: date-time
             */
            awarded_at: string;
        };
        /** SegmentStatsResponse */
        SegmentStatsResponse: {
            /** Segment Name */
            segment_name: string;
            /** User Count */
            user_count: number;
            /** Avg Ltv */
            avg_ltv: number;
            /** Activity Level */
            activity_level: string;
        };
        /** SendNotificationRequest */
        SendNotificationRequest: {
            /** Message */
            message: unknown;
            /** Topic */
            topic?: string | null;
            /**
             * Priority
             * @default 0
             */
            priority: number;
        };
        /** ShopPurchaseRequest */
        ShopPurchaseRequest: {
            /** User Id */
            user_id: number;
            /** Item Id */
            item_id: number;
            /** Item Name */
            item_name: string;
            /** Price */
            price: number;
            /** Description */
            description?: string | null;
        };
        /** ShopPurchaseResponse */
        ShopPurchaseResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** New Gold Balance */
            new_gold_balance: number;
            /** Item Id */
            item_id: number;
            /** Item Name */
            item_name: string;
            /** New Item Count */
            new_item_count: number;
        };
        /** SiteVisitCreate */
        SiteVisitCreate: {
            /** User Id */
            user_id: number;
            /** Source */
            source: string;
        };
        /** SiteVisitResponse */
        SiteVisitResponse: {
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /** Source */
            source: string;
            /**
             * Visit Timestamp
             * Format: date-time
             */
            visit_timestamp: string;
        };
        /**
         * SlotSpinRequest
         * @description 슬롯 머신 스핀 요청 모델
         */
        SlotSpinRequest: {
            /** Bet Amount */
            bet_amount: number;
            /**
             * Lines
             * @default 1
             */
            lines: number;
        };
        /**
         * SlotSpinResponse
         * @description 슬롯 머신 스핀 응답 모델
         */
        SlotSpinResponse: {
            /** Success */
            success: boolean;
            /** Reels */
            reels: string[][];
            /**
             * Win Amount
             * @default 0
             */
            win_amount: number;
            /**
             * Win Lines
             * @default []
             */
            win_lines: {
                [key: string]: unknown;
            }[];
            /**
             * Multiplier
             * @default 1
             */
            multiplier: number;
            /**
             * Is Jackpot
             * @default false
             */
            is_jackpot: boolean;
            /**
             * Free Spins Awarded
             * @default 0
             */
            free_spins_awarded: number;
            /** Message */
            message: string;
            /** Balance */
            balance: number;
            /** Special Animation */
            special_animation?: string | null;
        };
        /**
         * Token
         * @description 토큰 응답 스키마
         */
        Token: {
            /** Access Token */
            access_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
            user: components["schemas"]["app__schemas__auth__UserResponse"];
            /** Refresh Token */
            refresh_token?: string | null;
        };
        /** UnlockResponse */
        UnlockResponse: {
            /** Stage */
            stage: number;
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Thumbnail Url */
            thumbnail_url: string | null;
            /** Media Url */
            media_url: string | null;
        };
        /** UpdateSegmentRequest */
        UpdateSegmentRequest: {
            /** User Id */
            user_id: number;
            /**
             * Rfm Group
             * @description RFM segment group
             */
            rfm_group: string;
            /**
             * Ltv Score
             * @description Lifetime value score
             * @default 0
             */
            ltv_score: number;
            /**
             * Risk Profile
             * @description Risk profile level
             * @default MEDIUM
             */
            risk_profile: string;
        };
        /**
         * UserBanRequest
         * @description User ban request
         */
        UserBanRequest: {
            /** User Id */
            user_id: number;
            /** Reason */
            reason: string;
            /** Duration Hours */
            duration_hours?: number | null;
        };
        /**
         * UserCreate
         * @description 사용자 생성 스키마 - 회원가입 필수 입력사항
         * @example {
         *       "invite_code": "5858",
         *       "nickname": "테스터",
         *       "password": "1234",
         *       "phone_number": "01012345678",
         *       "site_id": "testuser123"
         *     }
         */
        UserCreate: {
            /**
             * Site Id
             * @description 사이트 아이디
             */
            site_id: string;
            /**
             * Nickname
             * @description 닉네임
             */
            nickname: string;
            /**
             * Phone Number
             * @description 전화번호
             */
            phone_number: string;
            /**
             * Invite Code
             * @description 초대코드 (5858)
             */
            invite_code: string;
            /**
             * Password
             * @description 비밀번호생성
             */
            password: string;
        };
        /**
         * UserGameActivity
         * @description 사용자 게임 활동 요약
         */
        UserGameActivity: {
            /** Game Type */
            game_type: string;
            /**
             * Total Rounds
             * @default 0
             */
            total_rounds: number;
            /**
             * Total Wins
             * @default 0
             */
            total_wins: number;
            /**
             * Total Losses
             * @default 0
             */
            total_losses: number;
            /**
             * Win Rate
             * @default 0
             */
            win_rate: number;
            /**
             * Favorite
             * @default false
             */
            favorite: boolean;
            /** Last Played */
            last_played?: string | null;
        };
        /**
         * UserLogin
         * @description 사용자 로그인 스키마
         * @example {
         *       "password": "password123",
         *       "site_id": "testuser123"
         *     }
         */
        UserLogin: {
            /**
             * Site Id
             * @description 사이트 아이디
             */
            site_id: string;
            /**
             * Password
             * @description 비밀번호
             */
            password: string;
        };
        /** UserMissionProgress */
        UserMissionProgress: {
            /** Mission Id */
            mission_id: number;
            /** Progress Increment */
            progress_increment: number;
        };
        /** UserMissionResponse */
        UserMissionResponse: {
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /** Mission Id */
            mission_id: number;
            /** Current Progress */
            current_progress: number;
            /** Completed */
            completed: boolean;
            /** Claimed */
            claimed: boolean;
            /**
             * Started At
             * Format: date-time
             */
            started_at: string;
            /** Completed At */
            completed_at?: string | null;
            /** Claimed At */
            claimed_at?: string | null;
            /** Reset At */
            reset_at?: string | null;
            mission?: components["schemas"]["MissionResponse"] | null;
        };
        /** UserPreferenceResponse */
        UserPreferenceResponse: {
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /** Preferred Games */
            preferred_games?: {
                [key: string]: unknown;
            } | null;
            /**
             * Game Difficulty Preference
             * @default medium
             */
            game_difficulty_preference: string;
            /**
             * Risk Tolerance
             * @default 0.5
             */
            risk_tolerance: number;
            /** Preferred Reward Types */
            preferred_reward_types?: {
                [key: string]: unknown;
            } | null;
            /** Spending Pattern */
            spending_pattern?: {
                [key: string]: unknown;
            } | null;
            /** Active Hours */
            active_hours?: {
                [key: string]: unknown;
            } | null;
            /** Session Duration Preference */
            session_duration_preference?: number | null;
            /** Content Categories */
            content_categories?: {
                [key: string]: unknown;
            } | null;
            /** Interaction Style */
            interaction_style?: string | null;
            /**
             * Learning Rate
             * @default 0.1
             */
            learning_rate: number;
            /** Last Model Update */
            last_model_update?: string | null;
            /**
             * Preference Accuracy
             * @default 0.5
             */
            preference_accuracy: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** UserPreferenceUpdate */
        UserPreferenceUpdate: {
            /** Preferred Games */
            preferred_games?: {
                [key: string]: unknown;
            } | null;
            /** Game Difficulty Preference */
            game_difficulty_preference?: string | null;
            /** Risk Tolerance */
            risk_tolerance?: number | null;
            /** Preferred Reward Types */
            preferred_reward_types?: {
                [key: string]: unknown;
            } | null;
            /** Spending Pattern */
            spending_pattern?: {
                [key: string]: unknown;
            } | null;
            /** Active Hours */
            active_hours?: {
                [key: string]: unknown;
            } | null;
            /** Session Duration Preference */
            session_duration_preference?: number | null;
            /** Content Categories */
            content_categories?: {
                [key: string]: unknown;
            } | null;
            /** Interaction Style */
            interaction_style?: string | null;
        };
        /**
         * UserProfileResponse
         * @description User profile response
         */
        UserProfileResponse: {
            /** Id */
            id: number;
            /** Site Id */
            site_id: string;
            /** Nickname */
            nickname: string;
            /** Phone Number */
            phone_number: string;
            /** Cyber Token Balance */
            cyber_token_balance: number;
            /** Is Admin */
            is_admin: boolean;
            /** Is Active */
            is_active: boolean;
        };
        /** UserRecommendationResponse */
        UserRecommendationResponse: {
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            recommendation_type: components["schemas"]["RecommendationType"];
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Content Data */
            content_data?: {
                [key: string]: unknown;
            } | null;
            /**
             * Priority Score
             * @default 0.5
             */
            priority_score: number;
            /**
             * Confidence Score
             * @default 0.5
             */
            confidence_score: number;
            /** Personalization Factors */
            personalization_factors?: {
                [key: string]: unknown;
            } | null;
            /** @default pending */
            status: components["schemas"]["RecommendationStatus"];
            /** Shown At */
            shown_at?: string | null;
            /** Clicked At */
            clicked_at?: string | null;
            /** Dismissed At */
            dismissed_at?: string | null;
            /** Expires At */
            expires_at?: string | null;
            /**
             * Source
             * @default ai_engine
             */
            source: string;
            /** Algorithm Version */
            algorithm_version?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** UserSegmentResponse */
        UserSegmentResponse: {
            /** User Id */
            user_id: number;
            /** Rfm Group */
            rfm_group: string;
            /** Ltv Score */
            ltv_score: number;
            /** Risk Profile */
            risk_profile: string;
            /**
             * Last Updated
             * Format: date-time
             */
            last_updated: string;
        };
        /**
         * UserStatsResponse
         * @description User statistics response
         */
        UserStatsResponse: {
            /** Total Games Played */
            total_games_played: number;
            /** Total Tokens Earned */
            total_tokens_earned: number;
            /** Total Tokens Spent */
            total_tokens_spent: number;
            /** Win Rate */
            win_rate: number;
            /** Level */
            level: number;
            /** Experience */
            experience: number;
        };
        /** UserUpdate */
        UserUpdate: {
            /** Nickname */
            nickname?: string | null;
            /** Phone Number */
            phone_number?: string | null;
            /** Password */
            password?: string | null;
            /** Rank */
            rank?: string | null;
        };
        /** ValidateInviteCodeRequest */
        ValidateInviteCodeRequest: {
            /** Code */
            code: string;
        };
        /** ValidateInviteCodeResponse */
        ValidateInviteCodeResponse: {
            /** Is Valid */
            is_valid: boolean;
            /** Error Message */
            error_message?: string | null;
            /** Code */
            code?: string | null;
            /** Expires At */
            expires_at?: string | null;
            /** Remaining Uses */
            remaining_uses?: number | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * UserResponse
         * @description 사용자 응답 스키마
         */
        app__schemas__auth__UserResponse: {
            /** Id */
            id: number;
            /** Site Id */
            site_id: string;
            /** Nickname */
            nickname: string;
            /** Phone Number */
            phone_number: string;
            /** Is Active */
            is_active: boolean;
            /** Is Admin */
            is_admin: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Last Login */
            last_login?: string | null;
        };
        /** UserResponse */
        app__schemas__user__UserResponse: {
            /** Id */
            id: number;
            /** Site Id */
            site_id: string;
            /** Nickname */
            nickname: string;
            /** Phone Number */
            phone_number: string;
            /** Cyber Token Balance */
            cyber_token_balance: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Is Active */
            is_active: boolean;
            /** Is Admin */
            is_admin: boolean;
            /**
             * Rank
             * @default STANDARD
             */
            rank: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    signup_api_auth_signup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_api_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLogin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_login_api_auth_admin_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminLogin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_api_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_refresh_api_auth_refresh_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_api_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_all_api_auth_logout_all_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    me_api_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__auth__UserResponse"];
                };
            };
        };
    };
    get_profile_api_users_profile_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__user__UserResponse"];
                };
            };
        };
    };
    update_user_profile_api_users_profile_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_balance_api_users_balance_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_user_info_api_users_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_user_stats_api_users_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserStatsResponse"];
                };
            };
        };
    };
    add_tokens_api_users_tokens_add_post: {
        parameters: {
            query: {
                amount: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_api_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__user__UserResponse"] | components["schemas"]["PublicUserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_admin_stats_api_admin_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminStatsResponse"];
                };
            };
        };
    };
    ban_user_api_admin_users__user_id__ban_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserBanRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unban_user_api_admin_users__user_id__unban_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_user_tokens_api_admin_users__user_id__tokens_add_post: {
        parameters: {
            query: {
                amount: number;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_action_api_actions_post: {
        parameters: {
            query: {
                user_id: number;
                action_type: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_rewards_api_rewards_users__user_id__rewards_get: {
        parameters: {
            query?: {
                /** @description Page number, 1-indexed */
                page?: number;
                /** @description Number of items per page */
                page_size?: number;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRewardsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    distribute_reward_to_user_api_rewards_distribute_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RewardDistributionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardItem"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    purchase_shop_item_api_shop_purchase_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShopPurchaseRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShopPurchaseResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_missions_api_missions__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    claim_mission_reward_api_missions__mission_id__claim_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mission_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_quiz_details_quiz__quiz_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quiz_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_quiz_answers_quiz__quiz_id__submit_post: {
        parameters: {
            query?: {
                user_id?: number;
            };
            header?: never;
            path: {
                quiz_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnswerRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_connection_status_api_chat_status__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_recommendations_api_ai_recommendations_get: {
        parameters: {
            query?: {
                recommendation_type?: string | null;
                status?: string | null;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRecommendationResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_recommendations_api_ai_recommendations_generate_post: {
        parameters: {
            query?: {
                recommendation_type?: string | null;
                max_recommendations?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRecommendationResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    record_recommendation_interaction_api_ai_recommendations__recommendation_id__interact_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                recommendation_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecommendationInteractionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecommendationInteractionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_preferences_api_ai_preferences_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreferenceResponse"];
                };
            };
        };
    };
    update_user_preferences_api_ai_preferences_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPreferenceUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreferenceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_personalized_content_api_ai_personalize_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonalizationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonalizationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_predictions_api_ai_predictions_get: {
        parameters: {
            query?: {
                prediction_type?: string | null;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModelPredictionResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_recommendation_stats_api_ai_recommendations_stats_get: {
        parameters: {
            query?: {
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_ai_feedback_api_ai_feedback_post: {
        parameters: {
            query: {
                recommendation_id: number;
                feedback: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_learning_progress_api_ai_learning_progress_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_main_dashboard_dashboard_main_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_games_dashboard_dashboard_games_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_social_proof_dashboard_social_proof_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    sse_notifications_sse_notifications__user_id__get: {
        parameters: {
            query?: {
                topics?: string | null;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_notification_api_notifications__user_id__send_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendNotificationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_backfill_api_notifications__user_id__backfill_get: {
        parameters: {
            query?: {
                since?: number | null;
                topics?: string | null;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_docs_titles_api_doc_titles_docs_titles_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown[];
                };
            };
        };
    };
    get_emotion_based_feedback_endpoint_feedback_emotion_based_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmotionFeedbackRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedbackResponse"] | null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_feedback_feedback_generate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_gacha_config_api_games_gacha_config_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_gacha_stats_api_games_gacha_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_games_list_api_games__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    spin_slot_api_games_slot_spin_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SlotSpinRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SlotSpinResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    play_rps_api_games_rps_play_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RPSPlayRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RPSPlayResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    pull_gacha_api_games_gacha_pull_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GachaPullRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GachaPullResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    place_crash_bet_api_games_crash_bet_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CrashBetRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CrashBetResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_game_stats_api_games_stats__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameStats"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_profile_game_stats_api_games_profile__user_id__stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileGameStats"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_game_leaderboard_api_games_leaderboard_get: {
        parameters: {
            query?: {
                game_type?: string | null;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameLeaderboard"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_achievements_api_games_achievements__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Achievement"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_game_session_api_games_session_start_post: {
        parameters: {
            query: {
                game_type: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameSession"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    end_game_session_api_games_session_end_post: {
        parameters: {
            query: {
                session_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_invite_code_api_invite_generate_post: {
        parameters: {
            query?: {
                expires_in_days?: number;
                max_uses?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InviteCodeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_invite_code_api_invite_validate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ValidateInviteCodeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateInviteCodeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_invite_codes_api_invite_codes_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InviteCodeResponse"][];
                };
            };
        };
    };
    deactivate_invite_code_api_invite_codes__code__deactivate_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_invite_stats_api_invite_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    premium_only_api_rbac_premium_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    vip_only_api_rbac_vip_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_dashboard_summary_api_analytics_dashboard_summary_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_user_activity_api_analytics_users_activity_get: {
        parameters: {
            query?: {
                /** @description Number of days to analyze */
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_game_statistics_api_analytics_games_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_user_segment_api_segments_user__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSegmentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_all_segments_api_segments_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SegmentStatsResponse"][];
                };
            };
        };
    };
    update_user_segment_api_segments_update_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSegmentRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSegmentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    calculate_rfm_segments_api_segments_calculate_rfm_post: {
        parameters: {
            query?: {
                /** @description Number of days to analyze for RFM calculation */
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_segment_distribution_api_segments_distribution_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    log_site_visit_endpoint_tracking_site_visit_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SiteVisitCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteVisitResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    attempt_content_unlock_api_unlock_unlock_get: {
        parameters: {
            query: {
                /** @description ID of the user attempting to unlock content */
                user_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnlockResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_active_events_api_events__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventResponse"][];
                };
            };
        };
    };
    get_event_detail_api_events__event_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    join_event_api_events_join_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventJoin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventParticipationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_event_progress_api_events_progress__event_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventProgressUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventParticipationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    claim_event_rewards_api_events_claim__event_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClaimRewardResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_daily_missions_api_events_missions_daily_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMissionResponse"][];
                };
            };
        };
    };
    get_weekly_missions_api_events_missions_weekly_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMissionResponse"][];
                };
            };
        };
    };
    get_all_missions_api_events_missions_all_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMissionResponse"][];
                };
            };
        };
    };
    update_mission_progress_api_events_missions_progress_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserMissionProgress"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    claim_mission_rewards_api_events_missions_claim__mission_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mission_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClaimRewardResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    kafka_health_api_kafka_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    kafka_produce_api_kafka_produce_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProduceRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    kafka_peek_api_kafka_debug_peek_get: {
        parameters: {
            query?: {
                topic?: string | null;
                max_messages?: number;
                from_beginning?: boolean;
                timeout_ms?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    kafka_last_messages_api_kafka__debug_last_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    kafka_ready_api_kafka__debug_ready_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_info_api_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
