name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start test stack
        run: |
          docker compose -f docker-compose.yml -f docker-compose.test.yml --env-file .env.test up -d --build postgres_test redis_test zookeeper_test kafka_test
          docker compose -f docker-compose.yml -f docker-compose.test.yml --env-file .env.test up -d --build backend_test

      - name: Wait for backend presence
        run: |
          for i in {1..30}; do
            if docker ps --format '{{.Names}} {{.Status}}' | grep -q 'cc_backend_test'; then echo "Backend container present"; break; fi; sleep 2; done
          docker logs cc_backend_test --tail 200 || true

      - name: Alembic history
        run: docker exec cc_backend_test alembic history | tail -n 50

      - name: Alembic explicit downgrade/upgrade
        run: |
          # Downgrade to a stable known revision if present, then upgrade back to head
          set -e
          docker exec cc_backend_test alembic current
          # Try downgrade to previous revision id if available; ignore if not applicable
          docker exec cc_backend_test sh -lc "alembic downgrade -1 || true"
          docker exec cc_backend_test alembic upgrade head

      - name: Run minimal tests (inside container)
        env:
          KAFKA_TEST_TOPIC: cc_test_ci
          KAFKA_ENABLED: "1"
        run: |
          # Run only curated green path tests for gating
          docker exec -e KAFKA_TEST_TOPIC=cc_test_ci -e KAFKA_ENABLED=1 cc_backend_test pytest -q app/tests/test_user_journey.py app/tests/test_kafka_roundtrip.py

      - name: Non-blocking Kafka smoke (produce/peek)
        continue-on-error: true
        run: |
          # Execute a tiny python httpx script inside the backend container
          docker exec cc_backend_test sh -lc 'python - <<"PY"
          import os, time, json
          import httpx
          base = "http://127.0.0.1:8000"
          with httpx.Client(timeout=5.0) as c:
              r1 = c.get(f"{base}/health"); print("health:", r1.status_code)
              r2 = c.get(f"{base}/api/kafka/_debug/ready"); print("ready:", r2.text)
              marker = f"ci-{int(time.time())}"
              pr = c.post(f"{base}/api/kafka/produce", json={"topic":"cc_test_ci","payload":{"marker":marker}})
              print("produce:", pr.status_code)
              time.sleep(1)
              pk = c.get(f"{base}/api/kafka/debug/peek", params={"topic":"cc_test_ci","max_messages":200,"from_beginning":1})
              ok = marker in pk.text
              print("peek contains marker:", ok)
          PY'

      - name: Teardown
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.test.yml --env-file .env.test down -v
